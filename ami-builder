#!/bin/sh
# I really should do this in py or rb, and will before I go to far.  This is just a skeleton.
# This file used https://github.com/yejun/ec2build as a reference, but since it has different
# goals in mind, it is more of a guide then it is copied and extended.
# This property is covered under the GPL or any other permissive license you feel like.


### Tweakables
# everything you want to customize is in this section.
PACKS_BASE="pcre glib2 module-init-tools libgpg libgcrypt popt perl openssl kbd linux-firmware mkinitcpio-busybox  gen-init-cpio  which  mkinitcpio  less licenses logrotate texinfo groff man-db man-pages nano expat libarchive libfetch pacman pacman libnl procps psmisc tcp_wrappers tar vi wget"

# These are extra base packs, the idea being don't edit PACKS_MAIN unless you absolutely have too.
# instead just uncomment/tweak one of these and the string is cat'ed together during install.

#PACKS_VIM
#PACKS_EMACS

# these are packs from the AUR that should be installed by default.  They are not compiled
# in this script, so they must be .xz files.
# DO NOT INCLUDE THE KERNEL!  we use a special handler to make sure it only gets installed
# once and we use the one we want.
AURPACKS=""

# our kernel, from the AUR.
KERNELPACK="kernel26-ec2"

# DO NOT EDIT BELOW HERE.
# Well, you can, but you should know what you are doing.

### Setup filesystem

# setup env
WORKINGDIR="~/tmp/newroot"

mkdir -p $WORKINGDIR

# this is our 100m boot disk.
dd if=/dev/zero of=boot.img bs=1M count=100
# make our root, for now a 1.9g disk.
dd if=/dev/zero of=root.img bs=1M count=1900


# create filesystem, until I'm done testing this will be ext3.
mkfs.ext3 -F boot.img
mkfs.ext3 -F root.img

# setup new root.
mount -o loop root.img ./newroot
mkdir -p ./newroot/boot
mount -o loop boot.img ./newroot/boot


# concat pack lists from above together, later.
ALLPACKS=$PACKS_BASE

### Start building arch
# build the basic system
linux32 mkarchroot -f -C ./pacman.conf newroot $ALLPACKS

# setup the custom AUR stuff
mkdir -p newroot/root/AUR
cp -Rv AUR newroot/root/

# -r "bash" starts up a nice chroot env with all our mounts done. thanks Allan!
# I need to put an arch catch here, since this may implode on 32, haven't tested.
linux32 mkarchroot -r "bash" newroot
pacman -U /root/AUR/*.xz

### Boot loader
# I need to test if this looping nonsense is needed, it works but is it needed?
cd /
mkdir -p $ROOT/boot/boot/grub
cat << EOF > $ROOT/boot/boot/grub/menu.lst
default 0
timeout 1

title  Arch Linux
	root   (hd0,0)
	kernel /vmlinuz26-ec2.img root=/dev/xvda2 console=hvc0 ip=dhcp spinlock=tickless ro
EOF

cd $ROOT/boot
ln -s boot/grub .
cd ../..

### Modified Files.
# secure sshd
sed -e 's/#PasswordAuthentication yes/PasswordAuthentication no/' -i /etc/ssh/sshd_config
sed -e 's/#UseDNS yes/UseDNS no/' -i /etc/ssh/sshd_config

# setup our fstab with uuid's
cat << EOF > /etc/fstab
$(blkid -c /dev/null -s UUID -o export /dev/xvdm2) /     auto    defaults,relatime 0 1
$(blkid -c /dev/null -s UUID -o export /dev/xvdm1) /boot auto    defaults,noauto,relatime 0 0
none      /proc proc    nodev,noexec,nosuid 0 0
none /dev/pts devpts defaults 0 0
none /dev/shm tmpfs nodev,nosuid 0 0
EOF

# setup our resolv.conf
echo "nameserver 172.16.0.23" > /etc/resolv.conf

# fix inittab up so it will output to console and not spawn ttys.
cat << EOF > $ROOT/etc/inittab
id:3:initdefault:
rc::sysinit:/etc/rc.sysinit
rs:S1:wait:/etc/rc.single
rm:2345:wait:/etc/rc.multi
rh:06:wait:/etc/rc.shutdown
su:S:wait:/sbin/sulogin -p
ca::ctrlaltdel:/sbin/shutdown -t3 -r now
# This will enable the system log.
c0:12345:respawn:/sbin/agetty 38400 hvc0 linux
EOF

# fix hosts.deny nonsense.
cat << EOF >/etc/hosts.deny
#
# /etc/hosts.deny
#
# End of file
EOF

#rc.conf
cat <<EOF >/etc/rc.conf
LOCALE="en_US.UTF-8"
TIMEZONE="UTC"
MOD_AUTOLOAD="no"
USECOLOR="yes"
USELVM="no"
DAEMONS=( syslog-ng sshd crond ec2 )
EOF


# setup sudoers
# add this for amazon?  seems all the instances have it.
echo "%wheel ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

### Close up
# flag for first boot
# another amazon thing I need to test
touch /root/firstboot

# wrap up env

#chroot
exit

umount newroot/boot
umount newroot

